{"id":"../node_modules/@restart/hooks/esm/useCallbackRef.js","dependencies":[{"name":"C:\\Users\\bjarn\\Documents\\GitHub\\dragon\\frontend\\package.json","includedInParent":true,"mtime":1578591334933},{"name":"C:\\Users\\bjarn\\Documents\\GitHub\\dragon\\frontend\\.babelrc","includedInParent":true,"mtime":1578591194648},{"name":"C:\\Users\\bjarn\\Documents\\GitHub\\dragon\\frontend\\node_modules\\@restart\\hooks\\package.json","includedInParent":true,"mtime":1578590776765},{"name":"react","loc":{"line":1,"column":25},"parent":"C:\\Users\\bjarn\\Documents\\GitHub\\dragon\\frontend\\node_modules\\@restart\\hooks\\esm\\useCallbackRef.js","resolved":"C:\\Users\\bjarn\\Documents\\GitHub\\dragon\\frontend\\node_modules\\react\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useCallbackRef;\n\nvar _react = require(\"react\");\n\n/**\r\n * A convenience hook around `useState` designed to be paired with\r\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\r\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\r\n * instead of lazily accessing it in an effect.\r\n *\r\n * ```ts\r\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\r\n *\r\n * useEffect(() => {\r\n *   if (!element) return\r\n *\r\n *   const calendar = new FullCalendar.Calendar(element)\r\n *\r\n *   return () => {\r\n *     calendar.destroy()\r\n *   }\r\n * }, [element])\r\n *\r\n * return <div ref={attachRef} />\r\n * ```\r\n */\nfunction useCallbackRef() {\n  return (0, _react.useState)(null);\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../node_modules/@restart/hooks/esm/useCallbackRef.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/@restart/hooks/esm/useCallbackRef.js","original":{"line":2,"column":0}},{"generated":{"line":32,"column":0},"source":"../node_modules/@restart/hooks/esm/useCallbackRef.js","original":{"line":25,"column":15}},{"name":"useCallbackRef","generated":{"line":32,"column":9},"source":"../node_modules/@restart/hooks/esm/useCallbackRef.js","original":{"line":25,"column":24}},{"generated":{"line":32,"column":23},"source":"../node_modules/@restart/hooks/esm/useCallbackRef.js","original":{"line":25,"column":15}},{"generated":{"line":32,"column":26},"source":"../node_modules/@restart/hooks/esm/useCallbackRef.js","original":{"line":25,"column":41}},{"generated":{"line":33,"column":0},"source":"../node_modules/@restart/hooks/esm/useCallbackRef.js","original":{"line":26,"column":2}},{"generated":{"line":33,"column":9},"source":"../node_modules/@restart/hooks/esm/useCallbackRef.js","original":{"line":26,"column":9}},{"generated":{"line":33,"column":30},"source":"../node_modules/@restart/hooks/esm/useCallbackRef.js","original":{"line":26,"column":18}},{"generated":{"line":33,"column":34},"source":"../node_modules/@restart/hooks/esm/useCallbackRef.js","original":{"line":26,"column":9}},{"generated":{"line":33,"column":35},"source":"../node_modules/@restart/hooks/esm/useCallbackRef.js","original":{"line":26,"column":2}},{"generated":{"line":34,"column":0},"source":"../node_modules/@restart/hooks/esm/useCallbackRef.js","original":{"line":27,"column":1}}],"sources":{"../node_modules/@restart/hooks/esm/useCallbackRef.js":"import { useState } from 'react';\r\n/**\r\n * A convenience hook around `useState` designed to be paired with\r\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\r\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\r\n * instead of lazily accessing it in an effect.\r\n *\r\n * ```ts\r\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\r\n *\r\n * useEffect(() => {\r\n *   if (!element) return\r\n *\r\n *   const calendar = new FullCalendar.Calendar(element)\r\n *\r\n *   return () => {\r\n *     calendar.destroy()\r\n *   }\r\n * }, [element])\r\n *\r\n * return <div ref={attachRef} />\r\n * ```\r\n */\r\n\r\nexport default function useCallbackRef() {\r\n  return useState(null);\r\n}"},"lineCount":null}},"error":null,"hash":"7021e1d16c7f3a9e6dfe4aefa2a73e56","cacheData":{"env":{}}}